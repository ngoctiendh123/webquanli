import { getAllFoodsFromIndexedDB, listenToFirebase } from './index.js';
import { updateFood, deleteFood as deleteFoodFromList } from './fire.js';

function goBack() {
    window.location.href = "quanlibanan.html"; // Quay v·ªÅ danh s√°ch b√†n ƒÉn
}

// G√°n s·ª± ki·ªán cho n√∫t "Quay l·∫°i" ƒë·ªÉ tr√°nh l·ªói kh√¥ng t√¨m th·∫•y h√†m
document.addEventListener("DOMContentLoaded", async function () {
    try {
        // X·ª≠ l√Ω n√∫t "Quay l·∫°i"
        const backBtn = document.querySelector(".back-btn");
        if (backBtn) {
            backBtn.addEventListener("click", goBack);
        }

        // X·ª≠ l√Ω n√∫t "Thanh to√°n"
        const checkoutBtn = document.getElementById("checkout-btn");
        if (checkoutBtn) {
            checkoutBtn.addEventListener("click", function () {
                handleCheckout(getTableIdFromUrl());
            });
        }   

        // M·ªü IndexedDB v√† l·∫•y danh s√°ch m√≥n ƒÉn
        await openIndexedDB();
        const foods = await getAllFoodsFromIndexedDB();
        renderFoodList(foods); // H√†m renderFoodList b·∫°n ƒë√£ c√≥ s·∫µn
        const tableId = getTableIdFromUrl();  // L·∫•y ID b√†n t·ª´ URL
        renderCart(tableId);
        listenToFirebase();
    } catch (error) {
        console.error(error);
    }
});
// L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi trong localStorage
window.addEventListener("storage", function(event) {
    if (event.key === "cartItems" || event.key === "tableId" || event.key === "price") {
        console.log("D·ªØ li·ªáu trong localStorage ƒë√£ thay ƒë·ªïi:", event);
        // C·∫≠p nh·∫≠t l·∫°i giao di·ªán ho·∫∑c l√†m c√°c thao t√°c kh√°c
    }
});


// ‚úÖ M·ªü IndexedDB m·ªôt l·∫ßn duy nh·∫•t
let dbInstance = null;
async function openIndexedDB() {
    if (dbInstance) return dbInstance;
    return new Promise((resolve, reject) => {
        let request = indexedDB.open("FoodDB", 4);
        request.onupgradeneeded = function (event) {
            let db = event.target.result;
            if (!db.objectStoreNames.contains("foods")) {
                db.createObjectStore("foods", { keyPath: "id", autoIncrement: true });
            }
        };
        request.onsuccess = function (event) {
            dbInstance = event.target.result;
            resolve(dbInstance);
        };
        request.onerror = function () {
            reject("‚ùå L·ªói m·ªü IndexedDB!");
        };
    });
}

// ‚úÖ Load m√≥n ƒÉn t·ª´ IndexedDB


// ‚úÖ Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn
export function renderFoodList(foods) {
    let foodList = document.getElementById("food-list");
    if (!foodList) return;
    foodList.innerHTML = "<h3>üìñ Danh s√°ch m√≥n ƒÉn</h3>";

    foods.forEach(food => {
        let div = document.createElement("div");
        div.classList.add("food-item");
        div.innerHTML = `
            <span>${food.name} - ${food.price} VND</span>
            <button class="edit-food" data-id="${food.id}">‚úè S·ª≠a</button>
            <button class="delete-food" data-id="${food.id}">üóë X√≥a</button>
            <button class="add-to-cart" data-id="${food.id}" data-name="${food.name}" data-price="${food.price}">üõí</button>
        `;
        foodList.appendChild(div);
    });

    // ‚úÖ G√°n s·ª± ki·ªán cho c√°c n√∫t sau khi render l·∫°i
    attachEventListeners();
}

// ‚úÖ G√°n s·ª± ki·ªán cho c√°c n√∫t th√™m v√†o gi·ªè h√†ng, s·ª≠a v√† x√≥a
function attachEventListeners() {
    document.querySelectorAll(".add-to-cart").forEach(button => {
        button.addEventListener("click", function () {
            addToCart(getTableIdFromUrl(), this.getAttribute("data-id"), this.getAttribute("data-name"), this.getAttribute("data-price"));
        });
    });

    document.querySelectorAll(".edit-food").forEach(button => {
        button.addEventListener("click", (event) => {
            const foodId = event.target.getAttribute('data-id');
            
            // Thay v√¨ g·ªçi editFood, g·ªçi tr·ª±c ti·∫øp updateFood ƒë·ªÉ c·∫≠p nh·∫≠t m√≥n ƒÉn
            const newName = prompt("Nh·∫≠p t√™n m√≥n ƒÉn m·ªõi:");
            const newPrice = prompt("Nh·∫≠p gi√° m√≥n ƒÉn m·ªõi:");

            if (newName && newPrice) {
                // G·ªçi h√†m updateFood t·ª´ fire.js
                updateFood(foodId, newName, newPrice);  // G·ªçi tr·ª±c ti·∫øp h√†m updateFood ƒë·ªÉ s·ª≠a m√≥n ƒÉn
            } else {
                alert("Vui l√≤ng cung c·∫•p ƒë·ªß th√¥ng tin!");
            }
        });
    });

    document.querySelectorAll(".delete-food").forEach(button => {
        button.addEventListener("click", function () {
            const foodId = this.getAttribute("data-id");

            const confirmDelete = confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n ƒÉn n√†y kh√¥ng?");
            if (confirmDelete) {
                deleteFood(foodId);
            } else {
                alert("‚ùå B·∫°n ƒë√£ h·ªßy vi·ªác x√≥a m√≥n ƒÉn.");
            }
        });
    });
}

// ‚úÖ Th√™m m√≥n ƒÉn v√†o gi·ªè h√†ng
function addToCart(tableId, id, name, price) {
    if (!id || !name || !price) {
        alert("‚ùå L·ªói: M√≥n ƒÉn kh√¥ng h·ª£p l·ªá!");
        return;
    }

    let cart = loadCart(tableId); // L·∫•y gi·ªè h√†ng c·ªßa b√†n t·ª´ localStorage
    let existingItem = cart.find(item => item.id === id);

    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({ id, name, price: parseInt(price), quantity: 1 });
    }

    saveCart(tableId, cart); // L∆∞u gi·ªè h√†ng v√†o localStorage
    renderCart(tableId); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng tr√™n giao di·ªán
}

// L∆∞u gi·ªè h√†ng v√†o localStorage cho m·ªói b√†n
function saveCart(tableId, cart) {
    localStorage.setItem(`cart_ban${tableId}`, JSON.stringify(cart));
}

// L·∫•y gi·ªè h√†ng t·ª´ localStorage cho b√†n c·ª• th·ªÉ
function loadCart(tableId) {
    return JSON.parse(localStorage.getItem(`cart_ban${tableId}`)) || [];
}


// Hi·ªÉn th·ªã gi·ªè h√†ng b√™n ph·∫£i m√†n h√¨nh
function renderCart(tableId) {
    let cartItemsContainer = document.getElementById("cart-items");
    let cart = loadCart(tableId); // L·∫•y gi·ªè h√†ng c·ªßa b√†n t·ª´ localStorage

    if (!cartItemsContainer) return;

    cartItemsContainer.innerHTML = "";

    if (cart.length === 0) {
        cartItemsContainer.innerHTML = "<p>üõí Gi·ªè h√†ng tr·ªëng!</p>";
        return;
    }

    cart.forEach(item => {
        let itemDiv = document.createElement("div");
        itemDiv.classList.add("cart-item");
        itemDiv.innerHTML = `
            <span>${item.name} - ${item.price} VND (x${item.quantity})</span>
            <button class="decrease-qty" data-id="${item.id}">‚ûñ</button>
            <button class="increase-qty" data-id="${item.id}">‚ûï</button>
            <button class="remove-item" data-id="${item.id}">‚ùå</button>
        `;
        cartItemsContainer.appendChild(itemDiv);
    });

    // G√°n s·ª± ki·ªán cho c√°c n√∫t tƒÉng, gi·∫£m s·ªë l∆∞·ª£ng, x√≥a m√≥n ƒÉn
    document.querySelectorAll(".increase-qty").forEach(button => {
        button.addEventListener("click", function () {
            updateQuantity(tableId, this.getAttribute("data-id"), 1);
        });
    });

    document.querySelectorAll(".decrease-qty").forEach(button => {
        button.addEventListener("click", function () {
            updateQuantity(tableId, this.getAttribute("data-id"), -1);
        });
    });

    document.querySelectorAll(".remove-item").forEach(button => {
        button.addEventListener("click", function () {
            removeFromCart(tableId, this.getAttribute("data-id"));
        });
    });
}

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m√≥n ƒÉn trong gi·ªè h√†ng
function updateQuantity(tableId, id, change) {
    let cart = loadCart(tableId);
    let item = cart.find(item => item.id === id);

    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            cart = cart.filter(item => item.id !== id);
        }
    }

    saveCart(tableId, cart); // L∆∞u l·∫°i gi·ªè h√†ng sau khi thay ƒë·ªïi
    renderCart(tableId); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng tr√™n giao di·ªán
}

// X√≥a m√≥n ƒÉn kh·ªèi gi·ªè h√†ng
function removeFromCart(tableId, id) {
    let cart = loadCart(tableId);
    cart = cart.filter(item => item.id !== id);

    saveCart(tableId, cart); // L∆∞u gi·ªè h√†ng ƒë√£ thay ƒë·ªïi v√†o localStorage
    renderCart(tableId); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng tr√™n giao di·ªán
}

// X·ª≠ l√Ω thanh to√°n
// X·ª≠ l√Ω thanh to√°n
// L·∫•y danh s√°ch m√≥n ƒÉn trong gi·ªè h√†ng t·ª´ IndexedDB
// X·ª≠ l√Ω thanh to√°n
function handleCheckout(tableId) {
    try {
        const cartItems = loadCart(tableId); // üî• L·∫•y gi·ªè h√†ng t·ª´ localStorage thay v√¨ IndexedDB
        if (!cartItems || cartItems.length === 0) {
            alert("‚ùå Gi·ªè h√†ng tr·ªëng!");
            return;
        }

        // T√≠nh t·ªïng ti·ªÅn t·ª´ gi·ªè h√†ng
        const totalAmount = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);

        // L∆∞u th√¥ng tin v√†o localStorage ƒë·ªÉ hi·ªÉn th·ªã ·ªü trang thanh to√°n
        localStorage.setItem("tableId", tableId);
        localStorage.setItem("totalAmount", totalAmount);
        localStorage.setItem("cartItems", JSON.stringify(cartItems)); // üî• L∆∞u c·∫£ gi·ªè h√†ng ƒë·ªÉ hi·ªÉn th·ªã

        // Chuy·ªÉn sang trang thanh to√°n
        window.location.href = "thanhtoan.html";
    } catch (error) {
        console.error("‚ùå L·ªói khi thanh to√°n: ", error);
    }
}





// ‚úÖ L·∫•y tableId t·ª´ URL
function getTableIdFromUrl() {
    const params = new URLSearchParams(window.location.search);
    const tableId = params.get("tableId") || "1";
    console.log("Table ID:", tableId); // Log ra tableId ƒë·ªÉ ki·ªÉm tra
    return tableId;
}

// X·ª≠ l√Ω thanh to√°n
