import { db } from "./fire.js";
import { collection, getDocs, onSnapshot } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js";
import { renderFoodList } from "./banan.js"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c

// ===========================
// üóÑ **Kh·ªüi t·∫°o IndexedDB**
// ===========================
document.addEventListener("DOMContentLoaded", async function () {
    await checkAndSyncFoods(); // Ki·ªÉm tra v√† ƒë·ªìng b·ªô d·ªØ li·ªáu m√≥n ƒÉn
    await checkAndSyncRevenue(); // Ki·ªÉm tra v√† ƒë·ªìng b·ªô d·ªØ li·ªáu doanh thu
    const foods = await getFoodsFromIndexedDB(); // L·∫•y d·ªØ li·ªáu m√≥n ƒÉn t·ª´ IndexedDB
    renderFoodList(foods); // Hi·ªÉn th·ªã m√≥n ƒÉn l√™n giao di·ªán
    listenToFirebase(); // L·∫Øng nghe Firebase ƒë·ªÉ c·∫≠p nh·∫≠t IndexedDB khi c√≥ thay ƒë·ªïi
});


let indexedDBInstance = null;
export async function openIndexedDB() {
    if (indexedDBInstance) {
        console.log("‚ö° IndexedDB ƒë√£ m·ªü tr∆∞·ªõc ƒë√≥!");
        return indexedDBInstance;
    }

    console.log("‚è≥ ƒêang m·ªü IndexedDB...");

    return new Promise((resolve, reject) => {
        let request = indexedDB.open("FoodDB", 4); // Phi√™n b·∫£n 4, ƒë·∫£m b·∫£o l√† phi√™n b·∫£n m·ªõi

        request.onupgradeneeded = function (event) {
            console.log("üîÑ ƒêang n√¢ng c·∫•p IndexedDB...");
            let db = event.target.result;

            // T·∫°o store foods n·∫øu ch∆∞a c√≥
            if (!db.objectStoreNames.contains("foods")) {
                db.createObjectStore("foods", { keyPath: "id" });
                console.log("‚úÖ ƒê√£ t·∫°o object store 'foods'.");
            } else {
                console.log("üìÇ Object store 'foods' ƒë√£ t·ªìn t·∫°i.");
            }

            // T·∫°o store revenue n·∫øu ch∆∞a c√≥
            if (!db.objectStoreNames.contains("revenue")) {
                db.createObjectStore("revenue", { keyPath: "id" });
                console.log("‚úÖ ƒê√£ t·∫°o object store 'revenue'.");
            } else {
                console.log("üìÇ Object store 'revenue' ƒë√£ t·ªìn t·∫°i.");
            }
        };

        request.onsuccess = function (event) {
            let db = event.target.result;
            console.log("‚úÖ IndexedDB ƒë√£ m·ªü th√†nh c√¥ng!");
            indexedDBInstance = db;
            resolve(db);
        };

        request.onerror = function (event) {
            console.error("‚ùå L·ªói m·ªü IndexedDB:", event.target.error);
            reject("‚ùå L·ªói m·ªü IndexedDB!");
        };
    });
}

// ===========================
// üóÑ **L·∫•y d·ªØ li·ªáu t·ª´ IndexedDB**
// ===========================
async function getFoodsFromIndexedDB() {
    let db = await openIndexedDB();
    return new Promise((resolve) => {
        let transaction = db.transaction("foods", "readonly");
        let store = transaction.objectStore("foods");
        let request = store.getAll();
        request.onsuccess = () => resolve(request.result);
    });
}

// ===========================
// üîÑ **C·∫≠p nh·∫≠t IndexedDB t·ª´ Firebase**
// ===========================
async function updateFoodsInIndexedDB(firebaseData) {
    let db = await openIndexedDB();
    return new Promise((resolve) => {
        let transaction = db.transaction("foods", "readwrite");
        let store = transaction.objectStore("foods");
        store.clear(); // X√≥a d·ªØ li·ªáu c≈©
        firebaseData.forEach(food => store.put(food)); // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
        transaction.oncomplete = () => resolve();
    });
}

// ===========================
// üîÑ **L·∫Øng nghe Firebase ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán**
// ===========================
export function listenToFirebase() {
    console.log("üëÄ ƒêang l·∫Øng nghe Firebase ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán...");

    onSnapshot(collection(db, "foods"), async (snapshot) => {
        let firebaseData = snapshot.docs.map(doc => ({
            id: parseInt(doc.id, 10),
            ...doc.data()
        }));

        console.log("‚ö° Firebase thay ƒë·ªïi! C·∫≠p nh·∫≠t IndexedDB v√† giao di·ªán...", firebaseData);

        await updateFoodsInIndexedDB(firebaseData); // C·∫≠p nh·∫≠t IndexedDB
        renderFoodList(firebaseData); // C·∫≠p nh·∫≠t giao di·ªán
    });
}

// ===========================
// üîç **So s√°nh IndexedDB v√† Firebase**
// ===========================
async function checkAndSyncFoods() {
    console.log("üîç Ki·ªÉm tra ƒë·ªìng b·ªô d·ªØ li·ªáu gi·ªØa IndexedDB & Firebase...");

    let indexedDBData = await getFoodsFromIndexedDB();
    let firebaseData = [];

    // L·∫•y d·ªØ li·ªáu t·ª´ Firebase
    const snapshot = await getDocs(collection(db, "foods"));
    firebaseData = snapshot.docs.map(doc => ({
        id: parseInt(doc.id, 10),
        ...doc.data()
    }));

    // So s√°nh d·ªØ li·ªáu
    let isSynced = JSON.stringify(indexedDBData) === JSON.stringify(firebaseData);
    
    if (!isSynced) {
        console.log("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë·ªìng b·ªô! Ti·∫øn h√†nh c·∫≠p nh·∫≠t IndexedDB t·ª´ Firebase...");
        await updateFoodsInIndexedDB(firebaseData);
        console.log("‚úÖ IndexedDB ƒë√£ c·∫≠p nh·∫≠t!");
    } else {
        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë·ªìng b·ªô!");
    }

    renderFoodList(indexedDBData);
 // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ IndexedDB n·∫øu c√≥
}
// index.js
// index.js ho·∫∑c file qu·∫£n l√Ω IndexedDB c·ªßa b·∫°n

// L·∫•y t·∫•t c·∫£ c√°c m√≥n ƒÉn t·ª´ IndexedDB
// H√†m l·∫•y t·∫•t c·∫£ m√≥n ƒÉn t·ª´ IndexedDB
// L·∫•y t·∫•t c·∫£ m√≥n ƒÉn t·ª´ IndexedDB
export function getAllFoodsFromIndexedDB() {
    return new Promise(async (resolve, reject) => {
        // ƒê·∫£m b·∫£o IndexedDB ƒë√£ m·ªü
        await openIndexedDB();  // ƒê·ª£i m·ªü IndexedDB tr∆∞·ªõc khi l√†m g√¨ ƒë√≥

        const db = indexedDBInstance;  // S·ª≠ d·ª•ng instance c·ªßa IndexedDB ƒë√£ m·ªü
        const transaction = db.transaction("foods", "readonly");
        const objectStore = transaction.objectStore("foods");

        const request = objectStore.getAll();  // L·∫•y t·∫•t c·∫£ m√≥n ƒÉn
        request.onsuccess = function(event) {
            resolve(event.target.result);  // Tr·∫£ v·ªÅ k·∫øt qu·∫£ m√≥n ƒÉn
        };

        request.onerror = function(event) {
            reject("‚ùå L·ªói l·∫•y m√≥n ƒÉn t·ª´ IndexedDB");
        };
    });
}

// L·∫•y d·ªØ li·ªáu doanh thu t·ª´ IndexedDB
async function getRevenueFromIndexedDB() {
    let db = await openIndexedDB();
    return new Promise((resolve) => {
        let transaction = db.transaction("revenue", "readonly");
        let store = transaction.objectStore("revenue");
        let request = store.getAll();
        request.onsuccess = () => resolve(request.result);
    });
}
// L·∫•y d·ªØ li·ªáu doanh thu t·ª´ Firebase
async function getRevenueFromFirebase() {
    const snapshot = await getDocs(collection(db, "revenue"));
    return snapshot.docs.map(doc => ({
        id: parseInt(doc.id, 10),
        ...doc.data()
    }));
}
// So s√°nh v√† ƒë·ªìng b·ªô d·ªØ li·ªáu doanh thu gi·ªØa Firebase v√† IndexedDB
async function checkAndSyncRevenue() {
    console.log("üîç Ki·ªÉm tra ƒë·ªìng b·ªô d·ªØ li·ªáu doanh thu gi·ªØa IndexedDB & Firebase...");

    let indexedDBRevenue = await getRevenueFromIndexedDB();
    let firebaseRevenue = await getRevenueFromFirebase();

    // So s√°nh d·ªØ li·ªáu doanh thu gi·ªØa Firebase v√† IndexedDB
    let isSynced = JSON.stringify(indexedDBRevenue) === JSON.stringify(firebaseRevenue);

    if (!isSynced) {
        console.log("‚ö†Ô∏è D·ªØ li·ªáu doanh thu kh√¥ng ƒë·ªìng b·ªô! Ti·∫øn h√†nh c·∫≠p nh·∫≠t IndexedDB t·ª´ Firebase...");
        await updateRevenueInIndexedDB(firebaseRevenue);
        console.log("‚úÖ D·ªØ li·ªáu doanh thu trong IndexedDB ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    } else {
        console.log("‚úÖ D·ªØ li·ªáu doanh thu ƒë√£ ƒë·ªìng b·ªô!");
    }
}

// C·∫≠p nh·∫≠t d·ªØ li·ªáu doanh thu t·ª´ Firebase v√†o IndexedDB
async function updateRevenueInIndexedDB(firebaseData) {
    if (firebaseData.length === 0) {
        console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu ƒë·ªÉ c·∫≠p nh·∫≠t t·ª´ Firebase!");
        return;
    }

    let db = await openIndexedDB();
    return new Promise((resolve, reject) => {
        let transaction = db.transaction("revenue", "readwrite");
        let store = transaction.objectStore("revenue");

        // X√≥a d·ªØ li·ªáu c≈© v√† th√™m d·ªØ li·ªáu m·ªõi
        store.clear(); // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        firebaseData.forEach(revenue => {
            store.put(revenue); // Th√™m d·ªØ li·ªáu v√†o IndexedDB
        });

        transaction.oncomplete = () => {
            console.log("‚úÖ D·ªØ li·ªáu doanh thu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o IndexedDB!");
            resolve();
        };

        transaction.onerror = (event) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t doanh thu v√†o IndexedDB:", event.target.error);
            reject("‚ùå L·ªói khi c·∫≠p nh·∫≠t doanh thu v√†o IndexedDB!");
        };
    });
}


// ===========================
// üì¶ **L∆∞u doanh thu v√†o IndexedDB**
// ===========================
export function saveRevenueToIndexedDB(revenueData) {
    return new Promise(async (resolve, reject) => {
        let db = await openIndexedDB();
        let transaction = db.transaction("revenue", "readwrite");
        let store = transaction.objectStore("revenue");

        // L∆∞u d·ªØ li·ªáu doanh thu v√†o object store 'revenue'
        store.put(revenueData);

        transaction.oncomplete = () => {
            console.log("‚úÖ Doanh thu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o IndexedDB!");
            resolve();
        };

        transaction.onerror = () => {
            console.error("‚ùå L·ªói khi l∆∞u doanh thu v√†o IndexedDB!");
            reject("‚ùå L·ªói khi l∆∞u doanh thu v√†o IndexedDB!");
        };
    });
}


// ===========================
// ‚úÖ Ch·∫°y khi trang load
// ===========================
